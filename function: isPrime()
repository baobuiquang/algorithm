//Function: Prime number
bool isPrime(int num)
{
	if (num < 2)
	{
		return false;
	}
	for (int i = 2; i <= num/2; i++)
	{
		if (num % i == 0)
		{
			return false;
		}
	}
	return true;
}


/*
1 is not a prime.
All primes except 2 are odd.
All primes greater than 3 can be written in the form 6k+/-1.
Any number n can have only one primefactor greater than n .
The consequence for primality testing of a number n is: if we cannot find a number f less than
or equal n that divides n then n is prime: the only primefactor of n is n itself

Function isPrime(n)
if n=1 then return false
else
if n<4 then return true //2 and 3 are prime
else
if n mod 2=0 then return false
else
if n<9 then return true //we have already excluded 4,6 and 8.
else
if n mod 3=0 then return false
else
r=floor( n ) // n rounded to the greatest integer r so that r*r<=n
f=5
 while f<=r
if n mod f=0 then return false (and step out of the function)
if n mod(f+2)=0 then return false (and step out of the function)
f=f+6
endwhile
return true (in all other cases)
End Function
*/
